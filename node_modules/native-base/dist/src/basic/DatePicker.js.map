{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","componentDidMount","setState","defaultDate","Date","state","modalVisible","chosenDate","undefined","date","onDateChange","Platform","OS","openAndroidDatePicker","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","variables","context","theme","variable","showDatePicker","bind","padding","color","datePickerTextColor","textStyle","placeHolderTextStyle","getDate","getMonth","getFullYear","placeHolderText","animationType","modalTransparent","backgroundColor","datePickerBg","flex","setDate","locale","timeZoneOffsetInMinutes","React","Component"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from \"react\";\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from \"react-native\";\nimport { Text } from \"native-base\";\nimport variable from \"../theme/variables/platform\";\n\nexport class DatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: new Date(),\n      chosenDate: undefined\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      defaultDate: this.props.defaultDate ? this.props.defaultDate : new Date()\n    });\n  };\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker() {\n    if (Platform.OS === \"android\") {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  }\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === \"dateSetAction\") {\n        let selectedDate = new Date(year, month, day);\n        this.setState({ chosenDate: selectedDate });\n        this.props.onDateChange(selectedDate);\n      }\n    } catch ({ code, message }) {\n      console.warn(\"Cannot open date picker\", message);\n    }\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={this.showDatePicker.bind(this)}\n            style={[\n              { padding: 10, color: variables.datePickerTextColor },\n              this.state.chosenDate ? this.props.textStyle : this.props.placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.state.chosenDate.getDate() +\n                \"/\" +\n                (this.state.chosenDate.getMonth() + 1) +\n                \"/\" +\n                +this.state.chosenDate.getFullYear()\n                : this.props.placeHolderText\n                  ? this.props.placeHolderText\n                  : \"Select Date\"}\n          </Text>\n          <View>\n            <Modal\n              animationType={this.props.animationType}\n              transparent={this.props.modalTransparent} //from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{ backgroundColor: variables.datePickerBg, flex: 1 }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={this.setDate.bind(this)}\n                minimumDate={this.props.minimumDate}\n                maximumDate={this.props.maximumDate}\n                mode=\"date\"\n                locale={this.props.locale}\n                timeZoneOffsetInMinutes={this.props.timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]}